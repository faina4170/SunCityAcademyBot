import os
import telebot
from telebot import types
import re
from dotenv import load_dotenv
from flask import Flask
from threading import Thread

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
MANAGER_CHAT_ID = int(os.getenv('MANAGER_CHAT_ID'))

if not BOT_TOKEN or not MANAGER_CHAT_ID:
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å BOT_TOKEN –∏–ª–∏ MANAGER_CHAT_ID –∏–∑ .env —Ñ–∞–π–ª–∞")

bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

class User:
    def __init__(self):
        self.user_type = None
        self.age = None
        self.interest = None
        self.name = None
        self.phone = None
        self.email = None
        self.selected_course = None


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    user_data[user_id] = User()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–ª—è —Ä–µ–±—ë–Ω–∫–∞')
    btn2 = types.KeyboardButton('–î–ª—è –≤–∑—Ä–æ—Å–ª–æ–≥–æ')
    btn3 = types.KeyboardButton('–Ø –ø–µ–¥–∞–≥–æ–≥')
    markup.add(btn1, btn2, btn3)

    bot.send_message(
        user_id,
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å –≤ –ê–∫–∞–¥–µ–º–∏–∏ –°–∞–Ω –°–∏—Ç–∏.\n\n"
        "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∫–æ–≥–æ –≤—ã –ø–æ–¥–±–∏—Ä–∞–µ—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text in ['–î–ª—è —Ä–µ–±—ë–Ω–∫–∞', '–î–ª—è –≤–∑—Ä–æ—Å–ª–æ–≥–æ', '–Ø –ø–µ–¥–∞–≥–æ–≥'])
def handle_user_type(message):
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = User()
    user_data[user_id].user_type = message.text

    if message.text == '–î–ª—è —Ä–µ–±—ë–Ω–∫–∞':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('5-6 –ª–µ—Ç')
        btn2 = types.KeyboardButton('7-9 –ª–µ—Ç')
        btn3 = types.KeyboardButton('10-12 –ª–µ—Ç')
        btn4 = types.KeyboardButton('13-15 –ª–µ—Ç')
        markup.add(btn1, btn2, btn3, btn4)

        bot.send_message(
            user_id,
            "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É?",
            reply_markup=markup
        )
    else:
        ask_for_interests(user_id)


def ask_for_interests(user_id):
    user = user_data[user_id]

    if user.user_type == '–î–ª—è –≤–∑—Ä–æ—Å–ª–æ–≥–æ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ö—É—Ä—Å—ã –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞')
        btn2 = types.KeyboardButton('–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤')
        btn3 = types.KeyboardButton('–ü–∞–º—è—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ')
        btn4 = types.KeyboardButton('–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º')
        btn5 = types.KeyboardButton('–î—Ä—É–≥–æ–µ')
        markup.add(btn1, btn2, btn3, btn4, btn5)

        bot.send_message(
            user_id,
            "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:",
            reply_markup=markup
        )
    elif user.user_type == '–Ø –ø–µ–¥–∞–≥–æ–≥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [
            '–ö—É—Ä—Å—ã –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            '–ö—É—Ä—Å—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
            '–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–ø–µ–¥–∞–≥–æ–≥–∏–∫–µ',
            '–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏',
            '–û–±—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—á—Ç–µ–Ω–∏—é',
            '–û–±—É—á–µ–Ω–∏–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ',
            '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–æ–±–∏—è',
            '–û–±—É—á–µ–Ω–∏–µ –º–Ω–µ–º–æ—Ç–µ—Ö–Ω–∏–∫–∞–º',
            '–†–∞–±–æ—Ç–∞ —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –ø–∏—Å—å–º–∞',
            '–î—Ä—É–≥–æ–µ'
        ]
        markup.add(*[types.KeyboardButton(btn) for btn in buttons])

        bot.send_message(
            user_id,
            "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=markup
        )


@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and
                                          user_data[message.chat.id].user_type == '–î–ª—è —Ä–µ–±—ë–Ω–∫–∞' and
                                          user_data[message.chat.id].age is None)
def handle_child_age(message):
    user_id = message.chat.id
    user_data[user_id].age = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    courses = [
        '–ù–µ–π—Ä–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ',
        '–†–∞–∑–≤–∏—Ç–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è, –ø–∞–º—è—Ç–∏, –º—ã—à–ª–µ–Ω–∏—è',
        '–°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ',
        '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ 1 –∫–ª–∞—Å—Å—É',
        '–î—Ä—É–≥–æ–µ'
    ]
    markup.add(*[types.KeyboardButton(course) for course in courses])

    bot.send_message(
        user_id,
        "–ö–∞–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and
                                          user_data[message.chat.id].interest is None and
                                          (user_data[message.chat.id].user_type in ['–î–ª—è –≤–∑—Ä–æ—Å–ª–æ–≥–æ', '–Ø –ø–µ–¥–∞–≥–æ–≥'] or
                                           user_data[message.chat.id].age is not None))
def handle_interests(message):
    user_id = message.chat.id
    user_data[user_id].interest = message.text
    ask_for_contacts(user_id)


def ask_for_contacts(user_id):
    bot.send_message(
        user_id,
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.send_message(
        user_id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )


@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and
                                          user_data[message.chat.id].name is None and
                                          user_data[message.chat.id].interest is not None)
def handle_name(message):
    user_id = message.chat.id
    user_data[user_id].name = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_contact = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", request_contact=True)
    btn_manual = types.KeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
    markup.add(btn_contact, btn_manual)

    bot.send_message(
        user_id,
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'\n"
        "2. –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79998887766 –∏–ª–∏ 89998887766)",
        reply_markup=markup
    )


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    if message.contact is not None:
        user_id = message.chat.id
        user_data[user_id].phone = message.contact.phone_number
        ask_for_email(user_id)


@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and
                                          user_data[message.chat.id].name is not None and
                                          user_data[message.chat.id].phone is None)
def handle_phone_input(message):
    user_id = message.chat.id

    if message.text == "–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é":
        bot.send_message(
            user_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n+79998887766 –∏–ª–∏ 89998887766",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    phone = message.text
    if re.match(r'^(\+7|8)\d{10}$', phone):
        user_data[user_id].phone = phone
        ask_for_email(user_id)
    else:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+79998887766 –∏–ª–∏ 89998887766 (11 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +7/8)"
        )


def ask_for_email(user_id):
    bot.send_message(
        user_id,
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        reply_markup=types.ReplyKeyboardRemove()
    )


@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and
                                          user_data[message.chat.id].phone is not None and
                                          user_data[message.chat.id].email is None)
def handle_email(message):
    user_id = message.chat.id
    email = message.text

    if '@' in email and '.' in email:
        user_data[user_id].email = email

        # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if user_data[user_id].user_type == '–î–ª—è —Ä–µ–±—ë–Ω–∫–∞':
            programs = [
                '–ù–µ–π—Ä–æ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ',
                '–°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ',
                '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞',
                '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
            ]
        elif user_data[user_id].user_type == '–î–ª—è –≤–∑—Ä–æ—Å–ª–æ–≥–æ':
            programs = [
                '–ö—É—Ä—Å –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞',
                '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–∞–º—è—Ç–∏',
                '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º '
            ]
        else:  # –î–ª—è –ø–µ–¥–∞–≥–æ–≥–æ–≤
            programs = [
                '–ö—É—Ä—Å –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                '–ù–µ–π—Ä–æ–ø–µ–¥–∞–≥–æ–≥–∏–∫–∞',
                '–ú–µ—Ç–æ–¥–∏–∫–∞ —Å–∫–æ—Ä–æ—á—Ç–µ–Ω–∏—è'
            ]

        markup.add(*[types.KeyboardButton(program) for program in programs])

        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É:",
            reply_markup=markup
        )
    else:
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@mail.ru)"
        )


@bot.message_handler(func=lambda message: user_data.get(message.chat.id) and
                                      user_data[message.chat.id].email is not None and
                                      user_data[message.chat.id].selected_course is None)
def handle_course_selection(message):
    user_id = message.chat.id
    user_data[user_id].selected_course = message.text

    user = user_data[user_id]
    manager_message = (
        "üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å:\n\n"
        f"–¢–∏–ø: {user.user_type}\n"
        f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {user.selected_course}\n"
        f"–ò–º—è: {user.name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
        f"Email: {user.email}"
    )

    if user.user_type == '–î–ª—è —Ä–µ–±—ë–Ω–∫–∞':
        manager_message += f"\n–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞: {user.age}"

    try:
        bot.send_message(MANAGER_CHAT_ID, manager_message)
        bot.send_message(
            user_id,
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã {user.selected_course}!\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. "
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
            reply_markup=types.ReplyKeyboardRemove()
        )


app = Flask(__name__)


# Keep-alive handler
@app.route('/ping')
def ping():
    return "pong"


@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


def run_flask():
    try:
        # Try to get Replit-specific info (will work only on Replit)
        repl_slug = os.environ.get('REPL_SLUG', 'not-on-replit')
        repl_owner = os.environ.get('REPL_OWNER', 'not-on-replit')
        if repl_slug != 'not-on-replit' and repl_owner != 'not-on-replit':
            print(f"–ü—É–±–ª–∏—á–Ω—ã–π URL: https://{repl_slug}.{repl_owner}.replit.dev")
        else:
            print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Replit: {e}")

    app.run(host='0.0.0.0', port=8080)


Thread(target=run_flask).start()
bot.polling(none_stop=True)


